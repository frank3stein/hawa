Parameters:
  EnvironmentName:
    Description: An environment name that will be prefixed to resource names
    Type: String
Resources:
  LoadBalancer:
    Type: "AWS::ElasticLoadBalancingV2::LoadBalancer"
    Properties:
      SecurityGroups: 
        - !Ref LoadBalancerSecGroup
      Subnets: 
        Fn::ImportValue: !Sub ${EnvironmentName}-PUB-NETS

  S3ReadOnlyEC2:
    Type: AWS::IAM::Role
    Properties:
        RoleName: 
            !Sub ${EnvironmentName}-Role
        AssumeRolePolicyDocument:
            Version: "2012-10-17"
            Statement:
            -   Effect: Allow
                Principal:
                    Service:
                    - ec2.amazonaws.com
                Action:
                - sts:AssumeRole
        Path: "/"
  RolePolicies:
      Type: AWS::IAM::Policy
      Properties:
          PolicyName: AmazonS3ReadOnlyAccess
          PolicyDocument:
              Version: '2012-10-17'
              Statement:
              - 
                  Effect: Allow
                  Action: 
                  -   s3:Get*
                  -   s3:List*
                  Resource: 
                  -   arn:aws:s3:::hawa
                  -   arn:aws:s3:::hawa/*
          Roles:
          -   Ref: S3ReadOnlyEC2
  ProfileWithRolesForOurApp:
    Type: AWS::IAM::InstanceProfile
    Properties:
        Path: "/"
        Roles:
        - Ref: S3ReadOnlyEC2
  # LoadBalancer:
  #   Type: "AWS::ElasticLoadBalancingV2::LoadBalancer"
  #   Properties:
  #     SecurityGroups:
  #       - !Ref LoadBalancerSecGroup
  #     Subnets:
  #       - !Ref PublicSubnet1
  #       - !Ref PublicSubnet2

  LoadBalancerSecGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: LoadBalancer
      GroupDescription: Allow http to our load balancer
      VpcId:
        Fn::ImportValue: !Sub "${EnvironmentName}-VPCID"
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-LBSecGroup

  LBListener:
    Type: "AWS::ElasticLoadBalancingV2::Listener"
    Properties:
      DefaultActions:
        - Type: "forward"
          TargetGroupArn: !Ref LBTargetGroups
      LoadBalancerArn: !Ref LoadBalancer
      Port: 80
      Protocol: "HTTP"

  LBListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - Type: forward
          TargetGroupArn: !Ref LBTargetGroups
      Conditions:
        - Field: path-pattern
          Values: [/]
      ListenerArn: !Ref LBListener
      Priority: 1

  LBTargetGroups:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 8
      HealthyThresholdCount: 2
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 5
      VpcId: 
        Fn::ImportValue: !Sub "${EnvironmentName}-VPCID"

  WebServerSecGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow http to our hosts and SSH from local only
      VpcId:
        Fn::ImportValue: !Sub "${EnvironmentName}-VPCID"
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        # Removed afterwards for security
        # - IpProtocol: tcp
        #   FromPort: 22
        #   ToPort: 22
        #   CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 0
          ToPort: 65535
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-WebServerSecGroup
      #instace profile contains the IAM Role name(s) that we want to associate to our auto scaling EC2 Servers
  # ProfileWithRolesForOurApp:
  #   Type: AWS::IAM::InstanceProfile
  #   Properties:
  #     Roles:
  #       - HawaS3ReadOnly

  WebAppLaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          apt-get update -y
          apt-get install unzip awscli -y
          apt-get install apache2 -y
          systemctl start apache2.service
          cd /var/www/html
          aws s3 cp s3://hawa/hawa.zip .
          unzip -o hawa.zip
      ImageId: ami-02df9ea15c1778c9c
      IamInstanceProfile: !Ref ProfileWithRolesForOurApp
      SecurityGroups:
        - Ref: WebServerSecGroup
      InstanceType: t3.medium
      BlockDeviceMappings:
        - DeviceName: "/dev/sdk"
          Ebs:
            VolumeSize: "10"
  WebAppGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier:
        Fn::ImportValue: !Sub ${EnvironmentName}-PUB-NETS
        # - !Ref PrivateSubnet1
        # - !Ref PrivateSubnet2
      LaunchConfigurationName:
        Ref: WebAppLaunchConfig
      MinSize: "1"
      MaxSize: "3"
      TargetGroupARNs: 
        - !Ref LBTargetGroups

Outputs:
  # VPCID:
  #   Description: A reference to the created VPC
  #   Value: !Ref VPC
  #   Export:
  #     Name: !Sub ${EnvironmentName}-VPCID
  # PublicSubnets:
  #   Description: A list of the public subnets
  #   Value: !Join [",", [!Ref PublicSubnet1, !Ref PublicSubnet2]]
  #   Export:
  #     Name: !Sub ${EnvironmentName}-PUB-NETS

  # PrivateSubnets:
  #   Description: A list of the private subnets
  #   Value: !Join [",", [!Ref PrivateSubnet1, !Ref PrivateSubnet2]]
  #   Export:
  #     Name: !Sub ${EnvironmentName}-PRIV-NETS

  LoadBalancer:
    Description: Load balancer public
    Value:
      Fn::Join: ["", ["http://", !GetAtt LoadBalancer.DNSName]]
    Export:
      Name: Hawa-LB-PublicAddress